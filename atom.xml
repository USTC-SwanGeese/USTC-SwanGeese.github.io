<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>USTC Team SwanGeese</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://USTC-SwanGeese.github.io/"/>
  <updated>2018-01-21T02:47:07.139Z</updated>
  <id>https://USTC-SwanGeese.github.io/</id>
  
  <author>
    <name>Team SwanGeese</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>全国大学生 RDMA 编程竞赛介绍</title>
    <link href="https://USTC-SwanGeese.github.io/2018/01/20/rdma-intro/"/>
    <id>https://USTC-SwanGeese.github.io/2018/01/20/rdma-intro/</id>
    <published>2018-01-20T10:00:00.000Z</published>
    <updated>2018-01-21T02:47:07.139Z</updated>
    
    <content type="html"><![CDATA[<p>嗯，先贴一段比赛官网的介绍：</p><blockquote><p>全国大学生 RDMA 编程竞赛，旨在为大学生提供学习RDMA，并成为RDMA编程高手的绝佳机会。自2013年首次举办，大赛就吸引了来自全国各地的20余家高校报名参加。在2016年举办第四届大赛时，更是吸引了70余所高校报名参加，并受到了来自国际顶尖高性能计算、云计算和大数据领域专家的广泛关注和媒体的争相报道。</p></blockquote><p>简单地说呢，RDMA 是一种相对于 TCP/IP 而言完全不同的网络通信模式。TCP 通信的基础设施是<strong>以太网卡</strong>、<strong>网线</strong>、<strong>交换机</strong>，响应地，RDMA 通信通常需要依靠 <strong>InfiniBand 卡</strong>、<strong>InfiniBand 线材</strong>、<strong>InfiniBand 交换机</strong>来完成组网和通信。</p><p>InfiniBand（后面简称 IB）卡通过 PCIE 接口与计算机互联。除了通信带宽、通信延迟都比以太网要好上几十倍这个量级以外，比较特别的是 IB 卡具有<strong>自主访问、读写内存</strong>的能力，因此它可以完成普通的 TCP 通信完全做不到功能，即我们这里需要的 <strong>RDMA（Remote Direct Memory Access）</strong>。</p><a id="more"></a><h1 id="RDMA"><a href="#RDMA" class="headerlink" title="RDMA"></a>RDMA</h1><p>RDMA（Remote Direct Memory Access）技术全称远程直接数据存取，就是为了解决网络传输中服务器端数据处理的延迟而产生的。RDMA通过网络把数据直接写到对方机器的内存里，即将数据从一个系统快速移动到远程系统存储器中，而不对操作系统造成任何影响，这样就不需要用到多少计算机的处理功能。它消除了外部存储器复制和上下文切换操作，因而能解放内存带宽和CPU周期用于改进应用系统性能。</p><blockquote><p>简单地说，利用 RDMA 技术，一个节点可以绕过 CPU，直接读写远程节点上的内存数据。</p></blockquote><h2 id="传统意义上的-DMA"><a href="#传统意义上的-DMA" class="headerlink" title="传统意义上的 DMA"></a>传统意义上的 DMA</h2><p>直接内存访问（DMA）方式，是一种完全由硬件执行I/O交换的工作方式。在这种方式中， DMA 控制器从CPU 完全接管对总线的控制，数据交换不经过CPU ，而直接在内存和IO设备之间进行。DMA工作时，由DMA控制器向内存发出地址和控制信号，进行地址修改，对传送字的个数计数，并且以中断方式向CPU 报告传送操作的结束。</p><p>使用 DMA 方式的目的是减少大批量数据传输时 CPU 的开销。采用专用DMA 控制器(DMAC) 生成访存地址并控制访存过程，优点有操作均由硬件电路实现，传输速度快；CPU 基本不干预，仅在初始化和结束时参与，CPU 与外设并行工作，效率高。</p><hr><p>更具体的原理就先不多说了，大家可以自己查资料看。</p><h1 id="那么比赛比什么？"><a href="#那么比赛比什么？" class="headerlink" title="那么比赛比什么？"></a>那么比赛比什么？</h1><p>赛方每年会给一个原本<strong>基于 TCP/IP</strong> 来进行多机通信的软件，要求你<strong>修改源代码</strong>，把这个软件改成<strong>基于 RDMA 的通信方式</strong>。</p><p>17年是给了 MXNet，16年是 TensorFlow，15年是 Memcached。</p><p>每年的应用基本上都是一些行业中特别热门的软件。</p><p>那么把大象装进冰箱需要几个步骤？3步。</p><ol><li>首先需要分析<strong>软件源代码</strong>，理解它的计算和多节点通信的方式；</li><li>修改代码，把原来基于 TCP/IP 的 Socket 的通信拿掉，换上 RDMA 的通信方式；</li><li>对修改的成果做测试，对比性能等等参数，写一份<strong>英文报告</strong>。</li></ol><h2 id="代码好改吗？"><a href="#代码好改吗？" class="headerlink" title="代码好改吗？"></a>代码好改吗？</h2><p>是不是我找到原本用 TCP 写的例如<code>sendmsg</code>和<code>recvmsg</code>、<code>readv</code>等等这种 Socket 通信函数用 RDMA 的接口换掉就好啦？</p><p>还真不是这么简单。</p><hr><p>首先，RDMA 和 TCP 的通信逻辑、整个通信过程会有根本性的区别。</p><p>TCP 通信的一般方式是（简化之后）：</p><ul><li>设立 socket 通道</li><li>握手等等操作建立连接</li><li>一边 send 另一边 recv 然后数据就收到了</li></ul><p>RDMA 的工作模式是基于一个完成队列的形式：</p><ul><li>首先建立 TCP 连接</li><li>通过 TCP 通道交换双方的一些参数信息</li><li>把对方的关键参数注册到自己的 IB 卡上，这样双方的 RDMA 连接就建立完成了</li><li>接下来还需要创建完成队列、保护域等等一系列 RDMA 通信用的东西</li><li>需要被 IB 卡操作的内存区域还需要提前注册到 IB 卡上，只有这样做了，才能保证 IB 卡有读写某一块内存地址的权限，也能保证这块内存不会被操作系统换页出去</li><li>接收端向自己的等待队列提交一个接收请求</li><li>发送端向自己的等待队列提交一个发送请求，之后 IB 卡会处理这条请求，根据其中的一些信息完成访问远程服务器上内存数据的操作，完成之后向自己的完成队列提交一条完成请求的信息，这时可以通过一些 API 来查询到完成队列里面的内容</li><li>接收端处理完之后，也会向自己的完成队列里面提交一条完成请求的信息，这时可以通过一些 API 来查询到完成队列里面的内容</li><li>把上面这个过程写在代码逻辑中，我们需要做的就是提交请求到 IB 卡上，然后后面的通信就不用管了，接下来要做的只是查询完成队列，查到完成队列中有新的内容了，就知道了刚刚的任务是完成了还是有出错的</li></ul><hr><p>难点大概有这么几个：</p><ul><li>要求参赛者自己理解目标软件的计算、通信模式，自己找到可以修改的源代码（赛方在目标软件方面基本上没办法提供任何帮助，给的一些资料和培训只是关于 RDMA 的基础知识）</li><li>把 TCP 换成 RDMA 并不是简单地换几个函数接口就好了，其中基本都是要涉及到通信逻辑、如何组织内存管理等等的问题</li><li>通信逻辑的设计可能对最终性能的影响也会比较大，例如我们基本每年成功改出来的第一个版本，光让原本的软件逻辑跑对就已经很不错了，都是没什么性能提升的，甚至可能会更慢</li></ul><h2 id="关于报告（论文）"><a href="#关于报告（论文）" class="headerlink" title="关于报告（论文）"></a>关于报告（论文）</h2><p>赛方要求用英文整理参赛的所有工作，最后比赛没有答辩什么的，就是在截止日期把软件源代码和报告交上去就行了。评判的标准首先当然是优化的效果了（客观），而另一方面报告的质量也是作为考察的一部分（主观）。写的好的报告甚至就已经是一篇不错的应用论文了。</p><p>报告中大概需要涉及到的内容有：</p><ul><li>对软件的分析</li><li>你的 RDMA 改版的设计思路（核心）</li><li>测试结果（重点）</li></ul><p>测试具体要怎么做，也是由参赛者自己选择。你可以选个自己测下来效果最好的测试算例的结果写上去，当然最好的结果是你的优化工作要对各种不同的算例都能够有比较好的效果，这些都会影响到最后的结果评判。提交报告和源代码过去之后赛方会拿你的代码进行对比测试，他们会选什么样的算例来作为测试标准就不知道了。</p><p>通常情况下，需要对比的是 TCP/IP 原版、IPoIB 以及 RDMA 版的性能。IPoIB（IP over Infiniband） 技术是 InfiniBand 自带的，即把 TCP/IP 包封装成 IB 包，走 IB 链路完成传输，可以利用上 IB 网络高带宽、低延迟的特性，但是 RDMA 的一些例如绕过 CPU 直接读写内存的特性就没办法享受到了，改的比较好的 RDMA 版本性能应该是要在 IPoIB 的基础上再往上提的。</p><p>关于 IPoIB 这点：</p><p>假定两台机器之间同时配有以太网络和 IB 网络，以太网的 IP 地址分别是<code>192.168.0.1</code>和<code>192.168.0.2</code>，IB 网络的 IP 地址是<code>10.0.0.1</code>和<code>10.0.0.2</code>。</p><p>当我们用<code>192</code>网段的 IP 地址进行通信时，数据包走的是以太网络；当用<code>10</code>网段的 IP 地址进行通信时，数据包走的是 IB 网络，即 IPoIB。</p><p>那完成了 RDMA 之后呢？其实用这两个网段都可以，因为 RDMA 通信只在连接的一开始才需要走常规的通信通道交换数据，等 RDMA 连接建立之后，整个通信过程就是基于两端绑定好的 IB 卡直接完成的了，中间已经不再涉及到跟 IP 数据包有关的东西了。</p><h1 id="参加这个比赛需要什么样的能力？"><a href="#参加这个比赛需要什么样的能力？" class="headerlink" title="参加这个比赛需要什么样的能力？"></a>参加这个比赛需要什么样的能力？</h1><p>基本要求跟前面 <a href="/2017/12/12/prerequisites/">技能储备要求</a> 中列的一样，另外要求能有阅读代码、编写代码的能力，这几年用到的都是 C 和 C++。</p><p>要求有良好的心理素质，不要被目标软件动辄几十万的代码量给吓到。</p><p>其他的就是网络方面的知识、多线程编程等等。</p><hr><p>其实上面这些基础如果不太好的同学也不用过于担心，我们前面几届很多一开始参赛的同学都不是说很精通这些方面，但是如果你能真正地把整个参赛过程坚持下来，从中你会学到很多东西。</p><h1 id="一些参考资料"><a href="#一些参考资料" class="headerlink" title="一些参考资料"></a>一些参考资料</h1><ul><li><p><a href="http://hpcadvisorycouncil.com/competition.php" target="_blank" rel="noopener">HPC Advisory Council</a></p><p>比赛举办方的官网页面，历年比赛在上面都能找到</p></li><li><p><a href="http://www.hpcadvisorycouncil.com/pdf/rdma-read-and-write-with-ib-verbs.pdf" target="_blank" rel="noopener">RDMA Read and Write with IB Verbs <em>by Tarick Bedeir</em></a></p></li><li><p><a href="http://www.rdmamojo.com/" target="_blank" rel="noopener">RDMA mojo : blog on RDMA technology and programming</a></p><p>RDMA mojo 是一个非常重要的资料站，上面基本上把需要用到的 RDMA 的一些函数结构给详细介绍了一遍</p></li><li><p><a href="http://www.mellanox.com/related-docs/prod_software/RDMA_Aware_Programming_user_manual.pdf" target="_blank" rel="noopener">RDMA Aware Networks Programming User Manual Rev 1.7</a></p></li><li><p><a href="http://www.hpcwire.com/hpcwire/2006-09-15/a_tutorial_of_the_rdma_model-1.html" target="_blank" rel="noopener">A Tutorial of the RDMA Model</a></p></li><li><p>下面是往届实验室师兄的一点零碎资料：</p><ul><li><a href="http://jcf94.com/2016/06/27/2016-06-27-rdma/" target="_blank" rel="noopener">RDMA Warming Up</a></li><li><a href="http://jcf94.com/2016/09/07/2016-09-07-rdmaibv/" target="_blank" rel="noopener">Simple usage of RDMA ibv</a></li></ul></li></ul><hr><p>祝未来参赛的同学都能有所收获，取的好成绩。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗯，先贴一段比赛官网的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全国大学生 RDMA 编程竞赛，旨在为大学生提供学习RDMA，并成为RDMA编程高手的绝佳机会。自2013年首次举办，大赛就吸引了来自全国各地的20余家高校报名参加。在2016年举办第四届大赛时，更是吸引了70余所高校报名参加，并受到了来自国际顶尖高性能计算、云计算和大数据领域专家的广泛关注和媒体的争相报道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单地说呢，RDMA 是一种相对于 TCP/IP 而言完全不同的网络通信模式。TCP 通信的基础设施是&lt;strong&gt;以太网卡&lt;/strong&gt;、&lt;strong&gt;网线&lt;/strong&gt;、&lt;strong&gt;交换机&lt;/strong&gt;，响应地，RDMA 通信通常需要依靠 &lt;strong&gt;InfiniBand 卡&lt;/strong&gt;、&lt;strong&gt;InfiniBand 线材&lt;/strong&gt;、&lt;strong&gt;InfiniBand 交换机&lt;/strong&gt;来完成组网和通信。&lt;/p&gt;
&lt;p&gt;InfiniBand（后面简称 IB）卡通过 PCIE 接口与计算机互联。除了通信带宽、通信延迟都比以太网要好上几十倍这个量级以外，比较特别的是 IB 卡具有&lt;strong&gt;自主访问、读写内存&lt;/strong&gt;的能力，因此它可以完成普通的 TCP 通信完全做不到功能，即我们这里需要的 &lt;strong&gt;RDMA（Remote Direct Memory Access）&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Introduction" scheme="https://USTC-SwanGeese.github.io/categories/Introduction/"/>
    
    
      <category term="RDMA" scheme="https://USTC-SwanGeese.github.io/tags/RDMA/"/>
    
  </entry>
  
  <entry>
    <title>2018年招入新人队员参加比赛的大致时间安排和队员组成</title>
    <link href="https://USTC-SwanGeese.github.io/2018/01/19/2018-newbees-timeline/"/>
    <id>https://USTC-SwanGeese.github.io/2018/01/19/2018-newbees-timeline/</id>
    <published>2018-01-19T18:57:58.000Z</published>
    <updated>2018-01-21T02:47:07.139Z</updated>
    
    <content type="html"><![CDATA[<p>以下均为大致预计人数。</p><ul><li>RDMA：2018年五月至十月，16级、17级本科生队员三人。</li><li>PAC：2018年五月至九月，16级、17级本科生队员七人。其中：<ul><li>优化队4人</li><li>应用队1人（有其它研究生参与）</li><li>人工智能队2人</li></ul></li><li>CPC：2018年五月至十月，16级、17级本科生队员二人。</li></ul><p>到2019年，我们会参加ISC和SC两项国际竞赛。其中，</p><ul><li>ISC19队伍：6人，包括16级和17级本科生。</li><li>SC19队伍：6人，主要为17级本科生（16级已经大四，可能没有时间；如果有心也可以参加。）</li></ul><p>更多信息参见<a href="/files/2018-enrollment-overall-anhong.pptx">安虹老师的招新宣传演示文稿</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下均为大致预计人数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDMA：2018年五月至十月，16级、17级本科生队员三人。&lt;/li&gt;
&lt;li&gt;PAC：2018年五月至九月，16级、17级本科生队员七人。其中：&lt;ul&gt;
&lt;li&gt;优化队4人&lt;/li&gt;
&lt;li&gt;应用队1人（有其它研究生参与
      
    
    </summary>
    
      <category term="Introduction" scheme="https://USTC-SwanGeese.github.io/categories/Introduction/"/>
    
    
      <category term="Arrangement" scheme="https://USTC-SwanGeese.github.io/tags/Arrangement/"/>
    
  </entry>
  
  <entry>
    <title>Student Cluster Competition系列比赛</title>
    <link href="https://USTC-SwanGeese.github.io/2018/01/19/scc-intro/"/>
    <id>https://USTC-SwanGeese.github.io/2018/01/19/scc-intro/</id>
    <published>2018-01-19T18:03:04.000Z</published>
    <updated>2018-01-21T02:47:07.139Z</updated>
    
    <content type="html"><![CDATA[<p><strong>WIP: ISC比赛的相关说明待更新</strong></p><p>Student Cluster Competition（学生超算竞赛）是一系列在指定功耗限制（3 kW）内，以现实科学计算问题作为计算任务，在限定时间内考量学生队伍表现的比赛。主要包括ASC（Asia Student Supercomputing Challenge）、ISC（ISC-HPCAC Student Cluster Competition，ISC-HPCAC是一个顶级学术会议）和SC（SC Student Cluster Competition，SC同样地也是一个顶级学术会议）三项，我们队伍历年来主要参加后两项。</p><p>ISC和SC SCC都在对应的顶会兼大型展览上举办。赛场即会场，比赛的区域便是展厅一角，展览开放期间也会有不少参观者路过、驻留围观，很是热闹。不过很可惜的是队员们绝对没有那个心情和精力去和他们闲聊~</p><p>话归正题。这一比赛的主要形式，是在赛前近半年给出比赛题目（一些用作计算任务的应用，通常是成型的开源项目等），学生从此时开始组队、分析应用、设计集群、联系vendor装配集群，进行比赛的准备。到赛场上后，组装好机器，然后开始三天每天8小时（ISC）或连续近48小时（SC）的比赛。虽然赛题在赛前给出，但具体的输入数据（算例）直到赛场才会提供，因此是不可伪造的。</p><p>以SC为例，这一比赛的主要考察内容有以下几点：</p><a id="more"></a><ul><li><p>应用分析和优化。</p><p>  SC作为下半年的比赛在六月份到八月份会陆续发放赛题，现在来说是两个应用和一个论文复现任务。无论哪个，它们的主要内容都是要对一个软件有着足够的了解，让它能高效地在你配置的集群上以不超过功耗上限3kW的情况下运行。也就是说，我们赛前有大约半年的时间对应用进行分析和优化。</p><p>  主要的步骤如下：</p><ol><li>编译执行。无论如何，我们都需要先让这个软件能够正常地工作，我们才能了解它的功能，测试它的性能特征。不要小看这一步工作，它也许会是非常复杂的；因为赛方出的应用很可能就是研究界甚至工业界常用的大型框架，百万行乃至千万行的代码都并不少见，依赖关系也会非常复杂。</li><li>试着运行应用，理解应用的运行模式。它有哪些主要组件，这些组件如何交互，通过阅读文档、代码和实际运行，就可以理解项目的结构。</li><li>寻找合适的算例。算例在科学计算当中非常重要，因为它才是计算的核心。我们有要处理的输入数据，它的特征将会影响我们的计算任务，从各方面特征到最终的性能。我们需要理解赛方出题的含义，分析可能的算例特征，找到合适的数据作为输入。</li><li>Profiling。大家可能对profiling这个东西不是很熟悉，它其实是对一个程序的性能进行观察，核算出每段代码所占的时间比例，也会考虑不同的调用链。通过profiling，我们可以确认程序当中最耗时间的部分在哪，可以知道这时他在做什么，也可以知道它为什么花去了很多时间，从而允许我们进一步针对性地优化和调整。通常的profiling工具有Intel VTune Amplifier，Paramon，Allinea Forge和针对GPU的NVIDIA (Visual) Profiler。</li><li>优化。主要分两个方向：<ul><li>结合经验测试各种可能带来性能提升的编译选项、运行配置，测试它们的性能，选择最优的方式去执行；这种方法一般用于代码没什么可优化的点的时候。需要注意的是，运行配置不仅仅是软件配置（多少线程、多少进程、进程如何分配NUMA、运行时版本……），还有一个很重要的事情则是硬件配置。不同的硬件可能会带来差别巨大的效果。</li><li>核心/热点代码优化。有些应用代码量小，可以很容易地抓到核心，并且核心部分优化提高的空间很大。这时候就需要动用自己关于体系结构的知识、和各种编程模型的了解，比如说SIMD向量化，OpenMP的多线程并行计算，MPI的多进程网络并行，CUDA的GPU计算，来对这部分花时间最长的代码进行优化。</li></ul></li><li>回到<code>4.</code>，循环迭代尽可能多的次数，直至赛前。（很不幸的是通常一轮都做不完）</li></ol></li><li><p>配置决策。</p><p>  这一步实际上是和应用分析优化同时进行的。应用分析好后，了解了它的特征，才能确定最适合它的硬件（CPU、GPU甚至KNL和FPGA）；而初步确定了配置，才可以进行进一步的优化，例如选定了GPU后进行CUDA版本的测试和优化。</p><p>  而最终的决策中，需要包含的内容大致有：</p><ol><li>硬件配置。是否使用GPU？使用多少、什么型号的GPU？什么型号的CPU？使用几个节点、每个节点配置多少计算资源？节点的机型？高速互连网络使用什么样的（虽然一般都是最新的Mellanox Infiniband……）？</li><li>软件配置。操作系统版本？驱动版本？负载管理器（关键！！SC17因没有这样的管理环境吃了不少亏）？Intel &amp; CUDA运行时版本？共享文件系统解决方案（NFS/OrangeFS…）？</li></ol></li><li><p>时间策略。我们有48个小时，怎么分配？这48小时一开始，所有的应用任务就一股脑地放了下来，如何很好地调度这些时间，避免浪费，就非常关键。这实际上取决于各个应用的特征。</p></li><li><p>宣传准备，也就是海报的制作。海报当中要包含的信息量十分巨大，如何在规定的版面内优雅而清晰地容纳下这些内容，是一个需要仔细思考设计的问题。</p></li><li><p>赛场应变。以上内容全都是赛前的准备，但赛场上才会将它们一一表现出来。硬件故障、软件故障、算例特征偏离预期、SC17新加入的Poster Session（站在外面英文给路人和评分人员讲解海报两个小时）、Conference Engagement（参加会议的一些报告，会问一些相关的问题；对我们来说近似于听力题）、Interview（每个应用的作者来和队员交流、了解我们的工作），这些都是赛场上才会碰到、需要当场解决的事情。</p></li></ul><blockquote><p>以上内容基本整理自<a href="/files/2018-enrollment-scc-caohuanqi.pptx">这一PPT</a>。</p></blockquote><p>一点经验：</p><ul><li><p>集群开始运输前让供应商提供精细到节点内主要零件的组件清单表。确认是否包含足数的以下项目：</p><ul><li>计算部件，包括CPU和GPU等（SC16最开始没有拿到CPU）</li><li>内存</li><li>硬盘</li><li>节点机箱和其中的主板等</li><li>风扇（SC17全程没有GPU风扇，非常痛苦）</li><li><p>供电线缆和Infiniband线缆（ISC16所有线都没有带，借用其他队伍的了）</p><p><strong>如果以后有吃更多奇葩的亏，请更新到以上列表；都是血和泪的教训啊（望天</strong></p></li></ul></li><li><p>Poster的制作一定要留出充足的时间。最好在各个应用已经初具头绪的时候就开始准备。</p></li><li><p>Conference Engagement中一定要录音、做笔记！那可是听力题！（SC16的时候还是很正常的观后感，SC17就变成了英语听力，对非英语国家队伍恶意满满）</p></li><li><p>时间策略一定要明确，不要摇摆不定，决定了如何跑就不要犹豫。（SC17中MrBayes经验谈）</p></li><li><p>当任务量大而零碎时，一定要使用负载管理器。不要信任自己随手写的脚本。（SC17中Born经验谈）</p></li><li><p>一定要考虑IO压力，就算是一开始IO不是负载重点，你优化了计算部分后也会出现问题。自己测试的时候因为有操作系统对算例的缓存，需要清理缓存才能体现真实负载。（SC17中Born经验谈）</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;WIP: ISC比赛的相关说明待更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Student Cluster Competition（学生超算竞赛）是一系列在指定功耗限制（3 kW）内，以现实科学计算问题作为计算任务，在限定时间内考量学生队伍表现的比赛。主要包括ASC（Asia Student Supercomputing Challenge）、ISC（ISC-HPCAC Student Cluster Competition，ISC-HPCAC是一个顶级学术会议）和SC（SC Student Cluster Competition，SC同样地也是一个顶级学术会议）三项，我们队伍历年来主要参加后两项。&lt;/p&gt;
&lt;p&gt;ISC和SC SCC都在对应的顶会兼大型展览上举办。赛场即会场，比赛的区域便是展厅一角，展览开放期间也会有不少参观者路过、驻留围观，很是热闹。不过很可惜的是队员们绝对没有那个心情和精力去和他们闲聊~&lt;/p&gt;
&lt;p&gt;话归正题。这一比赛的主要形式，是在赛前近半年给出比赛题目（一些用作计算任务的应用，通常是成型的开源项目等），学生从此时开始组队、分析应用、设计集群、联系vendor装配集群，进行比赛的准备。到赛场上后，组装好机器，然后开始三天每天8小时（ISC）或连续近48小时（SC）的比赛。虽然赛题在赛前给出，但具体的输入数据（算例）直到赛场才会提供，因此是不可伪造的。&lt;/p&gt;
&lt;p&gt;以SC为例，这一比赛的主要考察内容有以下几点：&lt;/p&gt;
    
    </summary>
    
      <category term="Introduction" scheme="https://USTC-SwanGeese.github.io/categories/Introduction/"/>
    
    
      <category term="SCC" scheme="https://USTC-SwanGeese.github.io/tags/SCC/"/>
    
  </entry>
  
  <entry>
    <title>技能储备要求</title>
    <link href="https://USTC-SwanGeese.github.io/2017/12/12/prerequisites/"/>
    <id>https://USTC-SwanGeese.github.io/2017/12/12/prerequisites/</id>
    <published>2017-12-12T16:49:43.000Z</published>
    <updated>2018-01-21T02:47:07.139Z</updated>
    
    <content type="html"><![CDATA[<p>对于技能储备，我们是没有硬性要求的；不会的东西学就好了。当然，有预先掌握的知识点或技能点会成为加分项。以下条目按重要性从高到低排序。</p><ul><li><p>信息检索，主要是搜索引擎的使用。</p><p>  熟练使用使用英文关键字在 Google 等（也就是不能是国内搜索引擎，例如百度）查找自己所需要的信息。不建议使用百度的原因是百度的结果当中，CSDN 等低质量社区权重较高，并且使用英文关键字搜索的质量较低；同时，高质量的 Stackoverflow 等社区都为英文。而很多 news 和 manual 都是 English only 的，因此建议使用<strong>英文</strong>关键字在 <strong>Google</strong> 上查找信息。</p><blockquote><p>当然了这也就要求你具备相当程度的英文阅读水平。你可以从现在起尝试一下，接下来每一条目的内容如果有不熟悉，直接去 Google 搜索。</p></blockquote></li><li><p>Linux 的使用。</p><p>  这里指的是 unix-like shell 中对包含 GNU toolchain 在内的工具的熟练使用，例如 gcc、git、bash script、包管理器等；以及对环境配置方式的了解，例如 <code>PATH</code>、<code>LD_LIBRARY_PATH</code> 等环境变量。</p></li><li><p>理解计算机系统的构成，理解编译器、操作系统、处理器的工作方式。</p><p>  《计算机系统概论》（《Introduction to Computing Systems》）将是很好的入门性质教材/课程参考，而《计算机体系结构：量化研究方法》则是很好的进阶教材（对应课程是计算机学院的必修课《计算机体系结构》）。</p><p>  你需要清楚从源代码到汇编到二进制再到被处理器执行的整个过程。这将有助于你分析性能问题、进行优化。</p></li><li><p>了解 GitHub 上多人协作的方式。</p><p>  在各种比赛中，如果需要修改代码或编写一些工具，通过实验室的 GitLab 平台进行协作将是较合适的方式，而 GitLab 与 GitHub 相似点很多。</p></li><li><p>了解包括 CMake 和 automake 在内的多种自动化构建系统，掌握 Makefile。</p><p>  在 SCC 比赛中，每个赛题都是一个成型的项目，经常会有超大型的（百万甚至千万行代码）的项目，这样的项目的编译配置都十分复杂，你需要熟练地使用各类自动化构建系统，才能快速上手项目。常用的构建工具包括 CMake 和 automake，但有时需要自己魔改编译参数、或者修 bug（没错，有 bug 很常见的）的时候，直接去接触 Makefile 本身也是必须的。</p><blockquote><p>CMake 和 automake 都是用来根据选项自动生成 Makefile 的工具。不了解的同学请参考它们的主页和文档。</p></blockquote></li><li><p>并行计算。</p><p>  你需要：</p><ul><li>了解 CPU 的多线程并行、GPU 的 SIMT 并行模型、多节点的分布式并行；</li><li><p>会使用 OpenMP、MPI 或 CUDA 编写并行程序。</p><p>了解概念有助于理解项目的运行方式（或者说不了解概念就理解不了），而能够编写并行程序则对于需要上手优化的项目有很重要的意义。在 PAC 比赛和 RDMA 比赛中，并行编程都是必须的。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于技能储备，我们是没有硬性要求的；不会的东西学就好了。当然，有预先掌握的知识点或技能点会成为加分项。以下条目按重要性从高到低排序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;信息检索，主要是搜索引擎的使用。&lt;/p&gt;
&lt;p&gt;  熟练使用使用英文关键字在 Google 等（也就是不能是
      
    
    </summary>
    
      <category term="Tutorials" scheme="https://USTC-SwanGeese.github.io/categories/Tutorials/"/>
    
    
      <category term="Overall" scheme="https://USTC-SwanGeese.github.io/tags/Overall/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://USTC-SwanGeese.github.io/2017/12/12/hello-world/"/>
    <id>https://USTC-SwanGeese.github.io/2017/12/12/hello-world/</id>
    <published>2017-12-12T00:00:00.000Z</published>
    <updated>2018-01-21T02:47:07.139Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Team SwanGeese says hello to the world here.</em></strong></p><p>中国科大超算鸿雁队于2012年成立，先后参加了22次高性能计算相关学生竞赛，共121人次参与其中。我们参加的比赛包括ASC、ISC、SCC、PAC、RDMA等。队伍由安虹老师指导，<a href="http://acsa.ustc.edu.cn" target="_blank" rel="noopener">先进计算机系统结构实验室</a>提供支持。</p><p>我们将在<a href="https://github.com/USTC-SwanGeese" target="_blank" rel="noopener">USTC-SwanGeese</a>中陆续上传先前历次竞赛中涉及的代码，并在本站点中陆续更新先前的参赛资料和总结。此外，我们常用的管理工具和方法也将在这里介绍和维护。</p><p>We are settled here and opening to everyone.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;Team SwanGeese says hello to the world here.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中国科大超算鸿雁队于2012年成立，先后参加了22次高性能计算相关学生竞赛，共121人次参与其中。我们参加的比赛包括A
      
    
    </summary>
    
      <category term="Introduction" scheme="https://USTC-SwanGeese.github.io/categories/Introduction/"/>
    
    
      <category term="Overall" scheme="https://USTC-SwanGeese.github.io/tags/Overall/"/>
    
  </entry>
  
</feed>
